{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1\n",
    "Convert following decimal number to a binary number by hand:\n",
    "\n",
    "    61 binary is 111101\n",
    "    15 binary is 1111\n",
    "    71 binary is 1000111"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0 1 1 1 1\n",
      "1 1 1 1\n",
      "1 1 1 0 0 0 1\n"
     ]
    }
   ],
   "source": [
    "61//2\n",
    "30//2\n",
    "15//2\n",
    "7//2\n",
    "3//2\n",
    "1//2\n",
    "print(61%2, 30%2, 15%2, 7%2, 3%2, 1%2)\n",
    "15//2\n",
    "7//2\n",
    "3//2\n",
    "1//2\n",
    "print(15%2, 7%2, 3%2, 1%2)\n",
    "71//2\n",
    "35//2\n",
    "17//2\n",
    "8//2\n",
    "4//2\n",
    "2//2\n",
    "1//2\n",
    "print(71%2, 35%2, 17%2, 8%2, 4%2, 2%2, 1%2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Exercise 2\n",
    "When a = 61 and b = 15, what is the result of following bitwise opertion? Use inline comments to show your result in a binary number. Find your answer by hand.\n",
    "\n",
    "    a & b\n",
    "    a | b\n",
    "    a ^ b\n",
    "    a >> 2\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0b111101\n",
      "0b1111\n"
     ]
    }
   ],
   "source": [
    "# convert a in to a binary number\n",
    "print(bin(61))\n",
    "\n",
    "# convert b in to a binary number\n",
    "print(bin(15))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "# a & b\n",
    "print(0b111101 & 0b1111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.066666666666666\n"
     ]
    }
   ],
   "source": [
    "# a | b\n",
    "print(0b111101/0b1111 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n"
     ]
    }
   ],
   "source": [
    "# a ^ b\n",
    "print(0b111101 ^ 0b1111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# a >> 2\n",
    "print(0b111101 >> 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3\n",
    "Ask a user for a code and store that answer. \n",
    "If the answer is <b>grey</b> then print \"You found secret code.\"\n",
    "Otherwise print that the entered code is not the secret code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "def secret_code(color) :  \n",
    "    if color == 'grey' :\n",
    "        print(\"You found secret code.\")\n",
    "    else :\n",
    "        print(\"The code entered is not the secret code.\")\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "secret_code grey\n",
      "You found secret code.\n"
     ]
    }
   ],
   "source": [
    "color = input(\"secret_code \")\n",
    "#secret_code(\"color\")\n",
    "secret_code(color)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Exercise 4\n",
    "Ask for an exam score and store that number. If the number is greater than 100, then print out 'You cannot have an exam score higher than 100'. If the number doesn't exceeed 100 but is greater than or equal to 75, then print out 'You did great on your exam!'. Otherwise if they scored lower than 75, then print out 'You need to study harder'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def exam_score(test) :\n",
    "    if test > 100 :\n",
    "        print(\"You cannot have an exam score higher than 100.\")\n",
    "    elif test >= 75 :\n",
    "        print (\"You did great on your exam!\")\n",
    "    else :\n",
    "        print (\"You need to study harder.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test score.60\n",
      "You need to study harder.\n"
     ]
    }
   ],
   "source": [
    "test = int(input(\"test score.\"))\n",
    "exam_score(test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5\n",
    "Write a function to convert a test score to a grade where  \n",
    " - 90 - 100: A\n",
    " - 80 - 89:  B\n",
    " - 70 - 79:  C\n",
    " - 60 - 69:  D\n",
    " - < 60   :  F\n",
    " \n",
    "If a score is not between 0 and 100 then print out an error message. In the program, ask the user for a score and then call your function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define your function\n",
    "def test_result(score) :\n",
    "    if score >= 90 :\n",
    "        print(\"A\") \n",
    "    elif score >= 80 :\n",
    "        print(\"B\")\n",
    "    elif score >= 70 :\n",
    "        print(\"C\")\n",
    "    elif score >= 60 :\n",
    "        print(\"D\")\n",
    "    elif score < 60 : \n",
    "        print(\"F\")\n",
    "    else :\n",
    "        print(\"error\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test scores54\n",
      "F\n"
     ]
    }
   ],
   "source": [
    "# ask the user for a score and then call your function\n",
    "score = int(input(\"Test scores\"))\n",
    "test_result(score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
